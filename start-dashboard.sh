#!/bin/bash

# Start Dashboard with Background Monitor
# ŸÜÿ∏ÿßŸÖ ÿ®ÿØÿ° ŸÑŸàÿ≠ÿ© ÿßŸÑÿ™ÿ≠ŸÉŸÖ ŸÖÿπ ÿßŸÑŸÖÿ±ÿßŸÇÿ® ÿßŸÑÿ™ŸÑŸÇÿßÿ¶Ÿä

echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë                                                            ‚ïë"
echo "‚ïë  üöÄ Starting Progress Dashboard System                    ‚ïë"
echo "‚ïë     ÿ®ÿØÿ° ŸÜÿ∏ÿßŸÖ ŸÑŸàÿ≠ÿ© ÿ™ÿ™ÿ®ÿπ ÿßŸÑÿ™ŸÇÿØŸÖ                            ‚ïë"
echo "‚ïë                                                            ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo ""

# Stop any existing processes
echo "üõë Stopping existing processes..."
pkill -f "background-monitor.js" 2>/dev/null
pkill -f "dashboard-server" 2>/dev/null
pkill -f "python3.*http.server" 2>/dev/null
pkill -f "next dev" 2>/dev/null
sleep 2

# Make scripts executable
chmod +x /workspace/dashboard-server-db.js
chmod +x /workspace/background-monitor.js

# Start the enhanced dashboard server with database support
echo "üìä Starting dashboard server on port 3001..."
cd /workspace && node dashboard-server-db.js > /tmp/dashboard.log 2>&1 &
DASH_PID=$!
echo "   Dashboard PID: $DASH_PID"
sleep 3

# Check if dashboard started successfully
if ps -p $DASH_PID > /dev/null; then
    echo "   ‚úÖ Dashboard server started successfully"
    echo "   üìù Logs: /tmp/dashboard.log"
else
    echo "   ‚ùå Dashboard server failed to start"
    echo "   üìù Check logs: cat /tmp/dashboard.log"
    exit 1
fi

# Start the background monitor
echo ""
echo "üîç Starting background monitor..."
cd /workspace && node background-monitor.js > /tmp/monitor.log 2>&1 &
MONITOR_PID=$!
echo "   Monitor PID: $MONITOR_PID"
sleep 2

# Check if monitor started successfully
if ps -p $MONITOR_PID > /dev/null; then
    echo "   ‚úÖ Background monitor started successfully"
    echo "   üìù Logs: /tmp/monitor.log"
else
    echo "   ‚ùå Background monitor failed to start"
    echo "   üìù Check logs: cat /tmp/monitor.log"
fi

echo ""
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë                                                            ‚ïë"
echo "‚ïë  ‚úÖ System Started Successfully!                          ‚ïë"
echo "‚ïë                                                            ‚ïë"
echo "‚ïë  üìä Dashboard:    http://localhost:3001                   ‚ïë"
echo "‚ïë  üîç Monitor:      Running in background                   ‚ïë"
echo "‚ïë                                                            ‚ïë"
echo "‚ïë  üìù View Dashboard Logs:  tail -f /tmp/dashboard.log     ‚ïë"
echo "‚ïë  üìù View Monitor Logs:    tail -f /tmp/monitor.log       ‚ïë"
echo "‚ïë                                                            ‚ïë"
echo "‚ïë  üõë To stop:      ./stop-dashboard.sh                     ‚ïë"
echo "‚ïë                                                            ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo ""

# Save PIDs for later
echo "$DASH_PID" > /tmp/dashboard.pid
echo "$MONITOR_PID" > /tmp/monitor.pid

# Test the connection
echo "üß™ Testing connection..."
sleep 2
HEALTH=$(curl -s http://localhost:3001/api/health 2>/dev/null)
if [ -n "$HEALTH" ]; then
    echo "   ‚úÖ Dashboard is responding"
    echo "$HEALTH" | grep -o '"status":"[^"]*"' | head -1
    echo "$HEALTH" | grep -o '"database":"[^"]*"' | head -1
else
    echo "   ‚ö†Ô∏è  Dashboard not responding yet (may need a few more seconds)"
fi

echo ""
echo "‚ú® System is ready! Open http://localhost:3001 in your browser"

