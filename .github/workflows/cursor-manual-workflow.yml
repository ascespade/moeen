name: 🤖 Cursor Manual Workflow

# ✅ يشتغل فقط لما أنت تبغاه يشتغل
on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'وش تبغى تسوي؟'
        required: true
        type: choice
        options:
          - 'test-only'           # فقط تشغيل الاختبارات
          - 'test-and-fix'        # اختبار + إصلاح لو فيه مشاكل
          - 'test-fix-enhance'    # اختبار + إصلاح + تحسين
          - 'enhance-only'        # فقط تحسين (بدون اختبار)
      
      stop_on_success:
        description: 'توقف لو الاختبارات نجحت؟'
        required: true
        type: boolean
        default: true
      
      model:
        description: 'أي Model تبغى تستخدم؟'
        required: false
        type: choice
        default: 'claude-sonnet-4'
        options:
          - 'claude-sonnet-4'
          - 'gpt-4o'
          - 'gpt-4-turbo'

env:
  NODE_VERSION: '18'

jobs:
  # ==========================================
  # المرحلة 1: الاختبارات
  # ==========================================
  test:
    name: 🧪 Run Tests
    if: |
      github.event.inputs.mode == 'test-only' ||
      github.event.inputs.mode == 'test-and-fix' ||
      github.event.inputs.mode == 'test-fix-enhance'
    runs-on: ubuntu-latest
    outputs:
      test_passed: ${{ steps.test.outcome == 'success' }}
      test_failed: ${{ steps.test.outcome == 'failure' }}
      should_continue: ${{ steps.check.outputs.should_continue }}
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps

      - name: 🧪 Run Tests
        id: test
        continue-on-error: true
        run: |
          echo "🚀 بدء تشغيل الاختبارات..."
          npm test 2>&1 | tee test-output.log
          TEST_EXIT_CODE=$?
          echo "exit_code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT
          exit $TEST_EXIT_CODE

      - name: 📊 Test Results Summary
        if: always()
        run: |
          echo "## 📊 نتائج الاختبارات" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.test.outcome }}" == "success" ]; then
            echo "✅ **جميع الاختبارات نجحت!** 🎉" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **بعض الاختبارات فشلت** 😔" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📄 Log:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -50 test-output.log >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: 🛑 Check if should stop
        id: check
        run: |
          STOP_ON_SUCCESS="${{ github.event.inputs.stop_on_success }}"
          TEST_PASSED="${{ steps.test.outcome == 'success' }}"
          
          if [ "$TEST_PASSED" == "true" ] && [ "$STOP_ON_SUCCESS" == "true" ]; then
            echo "✅ الاختبارات نجحت و أنت طلبت التوقف - سأتوقف هنا"
            echo "should_continue=false" >> $GITHUB_OUTPUT
          else
            echo "should_continue=true" >> $GITHUB_OUTPUT
          fi

      - name: 📤 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-output.log
            test-results/
            playwright-report/
          retention-days: 7

  # ==========================================
  # المرحلة 2: الإصلاح التلقائي
  # ==========================================
  fix:
    name: 🔧 Auto-Fix
    needs: test
    # يشتغل فقط لو:
    # 1. الاختبارات فشلت
    # 2. الـ mode يحتوي على fix
    if: |
      needs.test.outputs.test_failed == 'true' &&
      (github.event.inputs.mode == 'test-and-fix' || 
       github.event.inputs.mode == 'test-fix-enhance')
    runs-on: ubuntu-latest
    outputs:
      fix_success: ${{ steps.verify.outcome == 'success' }}
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📥 Download Test Logs
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: ./test-logs/

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps

      - name: 🚀 Install Cursor CLI
        run: |
          echo "🚀 تثبيت Cursor CLI..."
          curl https://cursor.com/install -fsS | bash
          echo "$HOME/.cursor/bin" >> $GITHUB_PATH

      - name: 🤖 Run Fix Agent
        id: fix_agent
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
        run: |
          echo "🤖 تشغيل Cursor Agent للإصلاح..."
          
          cursor-agent -p "
          🔧 **إصلاح اختبارات Playwright الفاشلة**
          
          **السياق:**
          - المستخدم شغل الـ workflow يدوياً
          - Model المطلوب: ${{ github.event.inputs.model }}
          - ملفات الاختبار: ./test-logs/
          
          **المهمة:**
          1. افتح test-output.log وراجع الأخطاء
          2. حدد السبب الحقيقي (ليس فقط العرض)
          3. أصلح الكود في src/ أو tests/
          4. تأكد من المنطق سليم
          
          **مشاكل Playwright الشائعة:**
          - Selector مش شغال → استخدم data-testid
          - Timeout → أضف proper waitFor()
          - Element not visible → تحقق من الشرط
          - API failed → راجع network calls
          
          **ممنوع:**
          ❌ تعطيل الاختبارات
          ❌ إضافة setTimeout عشوائي
          ❌ تجاهل المشكلة
          ❌ عمل commit أو push
          
          **مسموح:**
          ✅ تعديل src/**/*
          ✅ تعديل tests/**/*
          ✅ تعديل e2e/**/*
          ✅ إضافة تعليقات توضيحية
          
          **النتيجة المطلوبة:**
          - كل الاختبارات تنجح
          - الكود نظيف ومفهوم
          - بدون side effects
          " --model ${{ github.event.inputs.model }}

      - name: 🧪 Verify Fixes
        id: verify
        run: |
          echo "🧪 تحقق من الإصلاحات..."
          npm test

      - name: ✅ Create Fix PR
        if: steps.verify.outcome == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="fix/manual-${{ github.run_id }}"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b $BRANCH_NAME
          git add -A
          git commit -m "🤖 fix: manual auto-fix (run ${{ github.run_id }})"
          git push origin $BRANCH_NAME
          
          gh pr create \
            --title "🤖 إصلاح يدوي: اختبارات Playwright" \
            --body "## 🔧 إصلاحات تلقائية
          
          تم تشغيل هذا الـ workflow **يدوياً** بواسطة @${{ github.actor }}
          
          **التفاصيل:**
          - 🤖 Model: ${{ github.event.inputs.model }}
          - 🆔 Run ID: ${{ github.run_id }}
          - ✅ جميع الاختبارات تعمل الآن
          
          **المراجعة:**
          - [ ] تحقق من التغييرات منطقية
          - [ ] لا توجد تغييرات غير مطلوبة
          - [ ] الاختبارات تمر باستمرار
          
          ---
          🔗 [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          " \
            --base ${{ github.ref_name }} \
            --head $BRANCH_NAME

      - name: 📊 Fix Summary
        if: always()
        run: |
          echo "## 🔧 نتيجة الإصلاح" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.verify.outcome }}" == "success" ]; then
            echo "✅ **تم الإصلاح بنجاح!** 🎉" >> $GITHUB_STEP_SUMMARY
            echo "تم إنشاء PR مع الإصلاحات" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **فشل الإصلاح** 😔" >> $GITHUB_STEP_SUMMARY
            echo "قد تحتاج تدخل يدوي" >> $GITHUB_STEP_SUMMARY
          fi

  # ==========================================
  # المرحلة 3: التحسين
  # ==========================================
  enhance:
    name: ✨ Enhance Code
    needs: [test, fix]
    # يشتغل لو:
    # 1. Mode = test-fix-enhance وكل شيء نجح
    # 2. أو Mode = enhance-only
    if: |
      always() &&
      (github.event.inputs.mode == 'enhance-only' ||
       (github.event.inputs.mode == 'test-fix-enhance' && 
        (needs.test.outputs.test_passed == 'true' || needs.fix.outputs.fix_success == 'true')))
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps

      - name: 🚀 Install Cursor CLI
        run: |
          echo "🚀 تثبيت Cursor CLI..."
          curl https://cursor.com/install -fsS | bash
          echo "$HOME/.cursor/bin" >> $GITHUB_PATH

      - name: ✨ Run Enhancement Agent
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
        run: |
          echo "✨ تشغيل التحسينات..."
          
          cursor-agent -p "
          ✨ **تحسين جودة كود Playwright**
          
          **المهمة:**
          حسّن الكود والاختبارات بهدوء بدون عجلة
          
          **التحسينات المطلوبة:**
          
          1. **Test Coverage** 📊
             - ابحث عن كود بدون اختبارات
             - أضف tests للـ edge cases
             - حسن أوصاف الاختبارات
          
          2. **Performance** ⚡
             - قلل وقت تشغيل الاختبارات
             - استخدم parallelization
             - قلل الانتظار غير الضروري
          
          3. **Code Quality** ♻️
             - احذف الكود المكرر
             - حسن الأسماء
             - أضف comments مفيدة
             - استخدم const بدل magic numbers
          
          4. **Best Practices** 🎯
             - استخدم Page Object Model
             - حسن الـ selectors
             - أضف proper fixtures
             - حسن test isolation
          
          5. **Documentation** 📝
             - أضف JSDoc comments
             - حدث README
             - أضف أمثلة
          
          **قواعد:**
          ✅ تحسينات تدريجية
          ✅ لا تكسر شيء شغال
          ✅ اختبر كل تغيير
          ✅ وثق التغييرات المهمة
          " --model ${{ github.event.inputs.model }}

      - name: 🧪 Run Tests After Enhancement
        continue-on-error: true
        run: npm test

      - name: ✅ Create Enhancement PR
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="enhance/manual-${{ github.run_id }}"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b $BRANCH_NAME
          git add -A
          git commit -m "✨ enhance: code quality improvements (manual run #${{ github.run_id }})" || echo "No changes to commit"
          git push origin $BRANCH_NAME
          
          gh pr create \
            --title "✨ تحسينات الكود (Manual Run #${{ github.run_id }})" \
            --body "## ✨ تحسينات تلقائية
          
          تم تشغيلها يدوياً بواسطة @${{ github.actor }}
          
          **التفاصيل:**
          - 🤖 Model: ${{ github.event.inputs.model }}
          - 🆔 Run ID: ${{ github.run_id }}
          
          **التحسينات:**
          - 📊 Test coverage
          - ⚡ Performance
          - ♻️ Code refactoring
          - 📝 Documentation
          
          **المراجعة:**
          - [ ] تحقق من التغييرات منطقية
          - [ ] لا توجد breaking changes
          - [ ] الاختبارات تمر
          
          ---
          🔗 [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          " \
            --base ${{ github.ref_name }} \
            --head $BRANCH_NAME

      - name: 📊 Enhance Summary
        if: always()
        run: |
          echo "## ✨ نتيجة التحسين" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.test.outcome }}" == "success" ]; then
            echo "✅ **تم التحسين بنجاح مع المحافظة على الاختبارات!** 🎉" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **تم التحسين لكن بعض الاختبارات تحتاج مراجعة** ⚠️" >> $GITHUB_STEP_SUMMARY
          fi

  # ==========================================
  # التقرير النهائي
  # ==========================================
  report:
    name: 📊 Final Report
    needs: [test, fix, enhance]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: 📊 Generate Report
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # 🎯 تقرير Workflow اليدوي
          
          ## ⚙️ الإعدادات
          - **Mode:** ${{ github.event.inputs.mode }}
          - **Stop on Success:** ${{ github.event.inputs.stop_on_success }}
          - **Model:** ${{ github.event.inputs.model }}
          - **شغله:** @${{ github.actor }}
          
          ## 📊 النتائج
          | المرحلة | الحالة |
          |---------|--------|
          | 🧪 Tests | ${{ needs.test.result || 'تم التخطي' }} |
          | 🔧 Fix | ${{ needs.fix.result || 'تم التخطي' }} |
          | ✨ Enhance | ${{ needs.enhance.result || 'تم التخطي' }} |
          
          ## 🔗 روابط مفيدة
          - [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [Cursor Dashboard](https://cursor.com/dashboard?tab=background-agents)
          
          ---
          🤖 تم بواسطة Cursor Agent
          EOF

      - name: 📤 Upload Final Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: final-report
          path: |
            test-results/
            playwright-report/
          retention-days: 30

