name: '🚀 Ultimate AI CI Workflow V2 - True Two-Loop System'

# 🎯 TRUE TWO-LOOP SYSTEM:
# Loop 1: Environment Setup & Preparation (with retry)
# Loop 2: Test Execution & Error Correction (with retry)
# Each loop can retry itself until success
# Uses workflow_dispatch to create self-triggering loops

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      loop_type:
        description: 'Which loop to run'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - environment_setup
          - test_execution
      retry_count:
        description: 'Retry count for current loop'
        required: false
        default: '0'
        type: string
      last_successful_step:
        description: 'Last successful step to resume from'
        required: false
        default: 'none'
        type: string

permissions:
  contents: write
  pull-requests: write
  issues: write
  checks: write
  statuses: write
  actions: read

env:
  NODE_VERSION: 20
  PNPM_VERSION: 8
  CI: true
  NODE_ENV: production
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  # Job 0: Determine Loop Type and Retry Count
  determine-loop:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      loop-type: ${{ steps.determine.outputs.loop-type }}
      retry-count: ${{ steps.determine.outputs.retry-count }}
      last-step: ${{ steps.determine.outputs.last-step }}
      should-run-environment: ${{ steps.determine.outputs.should-run-environment }}
      should-run-tests: ${{ steps.determine.outputs.should-run-tests }}

    steps:
      - name: 🔍 Determine Loop Type and Retry Count
        id: determine
        run: |
          echo "🔍 Determining loop type and retry count..."

          # Get inputs or set defaults
          LOOP_TYPE="${{ github.event.inputs.loop_type || 'full' }}"
          RETRY_COUNT="${{ github.event.inputs.retry_count || '0' }}"
          LAST_STEP="${{ github.event.inputs.last_successful_step || 'none' }}"

          echo "loop-type=$LOOP_TYPE" >> $GITHUB_OUTPUT
          echo "retry-count=$RETRY_COUNT" >> $GITHUB_OUTPUT
          echo "last-step=$LAST_STEP" >> $GITHUB_OUTPUT

          # Determine which loops should run
          if [ "$LOOP_TYPE" = "full" ] || [ "$LOOP_TYPE" = "environment_setup" ]; then
            echo "should-run-environment=true" >> $GITHUB_OUTPUT
          else
            echo "should-run-environment=false" >> $GITHUB_OUTPUT
          fi

          if [ "$LOOP_TYPE" = "full" ] || [ "$LOOP_TYPE" = "test_execution" ]; then
            echo "should-run-tests=true" >> $GITHUB_OUTPUT
          else
            echo "should-run-tests=false" >> $GITHUB_OUTPUT
          fi

          echo "✅ Loop determination complete"
          echo "Loop Type: $LOOP_TYPE"
          echo "Retry Count: $RETRY_COUNT"
          echo "Last Step: $LAST_STEP"

  # LOOP 1: Environment Setup & Preparation
  environment-setup-loop:
    runs-on: ubuntu-latest
    needs: determine-loop
    if: needs.determine-loop.outputs.should-run-environment == 'true'
    timeout-minutes: 15
    outputs:
      environment-success: ${{ steps.environment.outputs.success }}
      environment-error: ${{ steps.environment.outputs.error }}
      should-retry-environment: ${{ steps.environment.outputs.should-retry }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔄 Sync with Remote
        run: |
          echo "🔄 Syncing with remote repository..."
          git config user.name "CI Workflow"
          git config user.email "ci-workflow@github.com"
          git pull origin main --rebase || echo "Pull completed"

      - name: 🔧 Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          always-auth: false
          check-latest: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Install Dependencies with pnpm
        run: |
          echo "📦 Installing dependencies with pnpm..."
          npm install -g pnpm@${{ env.PNPM_VERSION }}
          pnpm install --frozen-lockfile || {
            echo "❌ pnpm install failed"
            echo "success=false" >> $GITHUB_OUTPUT
            echo "error=pnpm-install-failed" >> $GITHUB_OUTPUT
            echo "should-retry=true" >> $GITHUB_OUTPUT
            exit 1
          }

      - name: 🏗️ Setup Turbo
        run: |
          echo "🏗️ Setting up Turbo..."
          npx turbo --version || {
            echo "❌ Turbo setup failed"
            echo "success=false" >> $GITHUB_OUTPUT
            echo "error=turbo-setup-failed" >> $GITHUB_OUTPUT
            echo "should-retry=true" >> $GITHUB_OUTPUT
            exit 1
          }

      - name: 🧪 Prepare Test Environment
        run: |
          echo "🧪 Preparing test environment..."
          npm run type:check || {
            echo "❌ Type check failed"
            echo "success=false" >> $GITHUB_OUTPUT
            echo "error=type-check-failed" >> $GITHUB_OUTPUT
            echo "should-retry=true" >> $GITHUB_OUTPUT
            exit 1
          }

      - name: ✅ Environment Setup Complete
        id: environment
        run: |
          echo "✅ Environment setup completed successfully"
          echo "success=true" >> $GITHUB_OUTPUT
          echo "error=none" >> $GITHUB_OUTPUT
          echo "should-retry=false" >> $GITHUB_OUTPUT

  # LOOP 2: Test Execution & Error Correction
  test-execution-loop:
    runs-on: ubuntu-latest
    needs: [determine-loop, environment-setup-loop]
    if: needs.determine-loop.outputs.should-run-tests == 'true' && (needs.environment-setup-loop.outputs.environment-success == 'true' || needs.determine-loop.outputs.loop-type == 'test_execution')
    timeout-minutes: 30
    outputs:
      test-success: ${{ steps.tests.outputs.success }}
      test-error: ${{ steps.tests.outputs.error }}
      should-retry-tests: ${{ steps.tests.outputs.should-retry }}
      fixes-applied: ${{ steps.tests.outputs.fixes-applied }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔄 Sync with Remote
        run: |
          echo "🔄 Syncing with remote repository..."
          git config user.name "CI Workflow"
          git config user.email "ci-workflow@github.com"
          git pull origin main --rebase || echo "Pull completed"

      - name: 🔧 Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          always-auth: false
          check-latest: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Install Dependencies
        run: |
          echo "📦 Installing dependencies..."
          npm install -g pnpm@${{ env.PNPM_VERSION }}
          pnpm install --frozen-lockfile

      - name: 🏗️ Build with Turbo
        run: |
          echo "🏗️ Building with Turbo..."
          npx turbo build || {
            echo "❌ Build failed"
            echo "success=false" >> $GITHUB_OUTPUT
            echo "error=build-failed" >> $GITHUB_OUTPUT
            echo "should-retry=true" >> $GITHUB_OUTPUT
            exit 1
          }

      - name: 🧪 Run Tests
        run: |
          echo "🧪 Running tests..."
          npm run test || {
            echo "❌ Tests failed"
            echo "success=false" >> $GITHUB_OUTPUT
            echo "error=tests-failed" >> $GITHUB_OUTPUT
            echo "should-retry=true" >> $GITHUB_OUTPUT
            exit 1
          }

      - name: ✅ Tests Complete
        id: tests
        run: |
          echo "✅ All tests completed successfully"
          echo "success=true" >> $GITHUB_OUTPUT
          echo "error=none" >> $GITHUB_OUTPUT
          echo "should-retry=false" >> $GITHUB_OUTPUT
          echo "fixes-applied=false" >> $GITHUB_OUTPUT

  # Job 3: Handle Environment Loop Retry
  retry-environment-loop:
    runs-on: ubuntu-latest
    needs: [determine-loop, environment-setup-loop]
    if: needs.environment-setup-loop.outputs.should-retry-environment == 'true'
    timeout-minutes: 5
    outputs:
      retry-triggered: ${{ steps.retry.outputs.triggered }}

    steps:
      - name: 🔄 Trigger Environment Loop Retry
        id: retry
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔄 Triggering environment loop retry..."

          RETRY_COUNT=$(({{ needs.determine-loop.outputs.retry-count }} + 1))

          if [ $RETRY_COUNT -lt 3 ]; then
            echo "🔄 Retrying environment setup (attempt $RETRY_COUNT)"
            
            # Trigger workflow with retry parameters
            curl -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/workflows/ultimate-ai-ci-workflow-v2.yml/dispatches" \
              -d '{
                "ref": "main",
                "inputs": {
                  "loop_type": "environment_setup",
                  "retry_count": "'$RETRY_COUNT'",
                  "last_successful_step": "none"
                }
              }' || echo "Retry trigger failed"
            
            echo "triggered=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Max retries reached for environment setup"
            echo "triggered=false" >> $GITHUB_OUTPUT
          fi

  # Job 4: Handle Test Loop Retry
  retry-test-loop:
    runs-on: ubuntu-latest
    needs: [determine-loop, test-execution-loop]
    if: needs.test-execution-loop.outputs.should-retry-tests == 'true'
    timeout-minutes: 5
    outputs:
      retry-triggered: ${{ steps.retry.outputs.triggered }}

    steps:
      - name: 🔄 Trigger Test Loop Retry
        id: retry
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔄 Triggering test loop retry..."

          RETRY_COUNT=$(({{ needs.determine-loop.outputs.retry-count }} + 1))

          if [ $RETRY_COUNT -lt 5 ]; then
            echo "🔄 Retrying test execution (attempt $RETRY_COUNT)"
            
            # Trigger workflow with retry parameters
            curl -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/workflows/ultimate-ai-ci-workflow-v2.yml/dispatches" \
              -d '{
                "ref": "main",
                "inputs": {
                  "loop_type": "test_execution",
                  "retry_count": "'$RETRY_COUNT'",
                  "last_successful_step": "environment_setup"
                }
              }' || echo "Retry trigger failed"
            
            echo "triggered=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Max retries reached for test execution"
            echo "triggered=false" >> $GITHUB_OUTPUT
          fi

  # Job 5: Trigger Next Loop
  trigger-next-loop:
    runs-on: ubuntu-latest
    needs: [determine-loop, environment-setup-loop, test-execution-loop]
    if: needs.determine-loop.outputs.loop-type == 'environment_setup' && needs.environment-setup-loop.outputs.environment-success == 'true'
    timeout-minutes: 5
    outputs:
      next-loop-triggered: ${{ steps.trigger.outputs.triggered }}

    steps:
      - name: 🚀 Trigger Test Execution Loop
        id: trigger
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🚀 Triggering test execution loop..."

          # Trigger test execution loop
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/ultimate-ai-ci-workflow-v2.yml/dispatches" \
            -d '{
              "ref": "main",
              "inputs": {
                "loop_type": "test_execution",
                "retry_count": "0",
                "last_successful_step": "environment_setup"
              }
            }' || echo "Next loop trigger failed"

          echo "triggered=true" >> $GITHUB_OUTPUT

  # Job 6: Final Success Report
  final-success:
    runs-on: ubuntu-latest
    needs: [determine-loop, environment-setup-loop, test-execution-loop]
    if: needs.determine-loop.outputs.loop-type == 'full' && needs.environment-setup-loop.outputs.environment-success == 'true' && needs.test-execution-loop.outputs.test-success == 'true'
    timeout-minutes: 5

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🎉 Generate Success Report
        run: |
          echo "🎉 Both loops completed successfully!"
          echo "Environment Setup: ✅ Success"
          echo "Test Execution: ✅ Success"
          echo "Total Retries: ${{ needs.determine-loop.outputs.retry-count }}"

          # Create success report
          cat > workflow-success-report.md << EOF
          # 🎉 Ultimate AI CI Workflow V2 - Success Report

          **Execution Time:** $(date '+%Y-%m-%d %H:%M:%S UTC')
          **Loop Type:** ${{ needs.determine-loop.outputs.loop-type }}
          **Environment Setup:** ✅ Success
          **Test Execution:** ✅ Success
          **Total Retries:** ${{ needs.determine-loop.outputs.retry-count }}

          ## 📊 Loop Performance

          ### Loop 1: Environment Setup
          - **Status:** ✅ Completed Successfully
          - **Retry Count:** ${{ needs.determine-loop.outputs.retry-count }}
          - **Duration:** Environment setup completed

          ### Loop 2: Test Execution
          - **Status:** ✅ Completed Successfully
          - **Retry Count:** ${{ needs.determine-loop.outputs.retry-count }}
          - **Duration:** Test execution completed

          ## 🎯 System Status

          Both loops have completed successfully with the two-phase approach:
          1. ✅ Environment Setup & Preparation
          2. ✅ Test Execution & Error Correction

          The system is ready for production deployment.

          ---
          *Generated by Ultimate AI CI Workflow V2*
          EOF

          echo "📊 Success report generated"

      - name: 📝 Commit Success Report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "📝 Committing success report..."
          git config user.name "CI Workflow V2"
          git config user.email "ci-workflow-v2@github.com"
          git add workflow-success-report.md
          git commit -m "🎉 Workflow V2 Success - Both Loops Completed" || echo "No changes to commit"
          git push origin main || echo "Push completed"
