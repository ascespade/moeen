name: 🤖 CI Assistant - Self-Healing Error Resolver

on:
  workflow_run:
    workflows: ["🚀 Ultimate CI Self-Healing Agent"]
    types: [completed]
    branches: [main, develop, feature/*, hotfix/*, ai-auto-fixes/*]

permissions:
  contents: write
  pull-requests: write
  issues: write
  checks: write
  statuses: write
  actions: read

env:
  NODE_VERSION: '20'
  NPM_VERSION: '10'
  CI: true
  NODE_ENV: production

jobs:
  analyze-and-fix:
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: 📥 تحميل الكود
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 📦 إعداد Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 تثبيت التبعيات
        run: |
          npm ci
          npm install js-yaml
          npx playwright install --with-deps chromium

      - name: 🔍 تحليل خطأ الـ Self-Healing
        id: analyze-error
        run: |
          echo "🔍 تحليل خطأ الـ Self-Healing..."
          
          # إنشاء مجلدات التحليل
          mkdir -p analysis/ learning/ logs/
          
          # تحليل سجل الأخطاء
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            // إنشاء محلل الأخطاء
            class ErrorAnalyzer {
              constructor() {
                this.errors = [];
                this.learningData = this.loadLearningData();
                this.solutions = this.loadSolutions();
              }
              
              loadLearningData() {
                try {
                  return JSON.parse(fs.readFileSync('learning/error-patterns.json', 'utf8'));
                } catch {
                  return {};
                }
              }
              
              loadSolutions() {
                try {
                  return JSON.parse(fs.readFileSync('learning/known-solutions.json', 'utf8'));
                } catch {
                  return {};
                }
              }
              
              analyzeWorkflowError() {
                console.log('🔍 تحليل خطأ الـ workflow...');
                
            // تحليل أخطاء الـ workflow فقط
            const workflowErrors = [
              {
                pattern: 'YAML parsing error',
                solution: 'إصلاح مشكلة YAML syntax في الـ workflow',
                fix: 'fix-workflow-yaml'
              },
              {
                pattern: 'Invalid workflow',
                solution: 'إصلاح مشكلة workflow syntax',
                fix: 'fix-workflow-syntax'
              },
              {
                pattern: 'Permission denied',
                solution: 'إصلاح مشكلة الصلاحيات في الـ workflow',
                fix: 'fix-workflow-permissions'
              },
              {
                pattern: 'Artifact not found',
                solution: 'إصلاح مشكلة الـ artifacts في الـ workflow',
                fix: 'fix-workflow-artifacts'
              },
              {
                pattern: 'Timeout',
                solution: 'زيادة timeout في الـ workflow',
                fix: 'fix-workflow-timeout'
              }
            ];
                
                // تحديد نوع الخطأ
                const errorType = this.detectErrorType();
                const error = workflowErrors.find(e => errorType.includes(e.pattern)) || {
                  pattern: 'Unknown',
                  solution: 'تحليل يدوي مطلوب',
                  fix: 'manual-analysis'
                };
                
                console.log(\`🎯 نوع الخطأ: \${error.pattern}\`);
                console.log(\`💡 الحل: \${error.solution}\`);
                
                this.errors.push({
                  type: error.pattern,
                  solution: error.solution,
                  fix: error.fix,
                  timestamp: new Date().toISOString()
                });
                
                return error;
              }
              
              detectErrorType() {
                // محاولة قراءة سجل الأخطاء
                try {
                  const logFiles = [
                    'logs/error.log',
                    'logs/workflow-error.log',
                    '.github/workflows/ultimate-ci-self-healing.yml'
                  ];
                  
                  for (const file of logFiles) {
                    if (fs.existsSync(file)) {
                      const content = fs.readFileSync(file, 'utf8');
                      return content;
                    }
                  }
                } catch (e) {
                  console.log('⚠️ لم يتم العثور على سجل الأخطاء');
                }
                
                return 'Unknown error';
              }
              
              saveAnalysis() {
                const analysis = {
                  timestamp: new Date().toISOString(),
                  errors: this.errors,
                  learningData: this.learningData,
                  solutions: this.solutions
                };
                
                fs.writeFileSync('analysis/error-analysis.json', JSON.stringify(analysis, null, 2));
                console.log('💾 تم حفظ تحليل الأخطاء');
              }
            }
            
            const analyzer = new ErrorAnalyzer();
            const error = analyzer.analyzeWorkflowError();
            analyzer.saveAnalysis();
            
            // حفظ النتائج للخطوات التالية
            console.log(\`error-type=\${error.pattern}\` >> $GITHUB_OUTPUT);
            console.log(\`solution=\${error.solution}\` >> $GITHUB_OUTPUT);
            console.log(\`fix-type=\${error.fix}\` >> $GITHUB_OUTPUT);
          "

      - name: 🔧 إصلاح workflow فقط
        run: |
          echo "🔧 إصلاح workflow فقط - لا يصلح أي شيء آخر..."
          
          # استخدام سكريبت الإصلاح المتخصص
          node scripts/ci-assistant-fixer.js
          
          # إصلاح workflow فقط - لا يصلح أي شيء آخر
          echo "🔧 إصلاح workflow فقط..."
          
          # استخدام سكريبت الإصلاح المتخصص للـ workflows
          node scripts/ci-assistant-fixer.js

      - name: 🧠 التعلم من الخطأ
        run: |
          echo "🧠 التعلم من الخطأ..."
          
          # إنشاء مجلد التعلم
          mkdir -p learning/
          
          # حفظ معلومات الخطأ للتعلم
          node -e "
            const fs = require('fs');
            
            const errorInfo = {
              timestamp: new Date().toISOString(),
              errorType: '${{ steps.analyze-error.outputs.error-type }}',
              solution: '${{ steps.analyze-error.outputs.solution }}',
              fixType: '${{ steps.analyze-error.outputs.fix-type }}',
              workflowRunId: '${{ github.event.workflow_run.id }}',
              branch: '${{ github.ref_name }}',
              commit: '${{ github.sha }}'
            };
            
            // تحميل البيانات السابقة
            let learningData = [];
            try {
              learningData = JSON.parse(fs.readFileSync('learning/error-history.json', 'utf8'));
            } catch {
              learningData = [];
            }
            
            // إضافة الخطأ الجديد
            learningData.push(errorInfo);
            
            // حفظ البيانات المحدثة
            fs.writeFileSync('learning/error-history.json', JSON.stringify(learningData, null, 2));
            
            // إنشاء أنماط الأخطاء
            const patterns = {};
            learningData.forEach(error => {
              const key = error.errorType;
              patterns[key] = (patterns[key] || 0) + 1;
            });
            
            fs.writeFileSync('learning/error-patterns.json', JSON.stringify(patterns, null, 2));
            
            console.log('📚 تم حفظ معلومات الخطأ للتعلم');
            console.log(\`📊 إجمالي الأخطاء المسجلة: \${learningData.length}\`);
          "

      - name: 💾 حفظ التغييرات
        run: |
          echo "💾 حفظ التغييرات..."
          
          # فحص إضافي لمنع الحلقة المفرغة
          COMMIT_MSG="${{ github.event.workflow_run.head_commit.message }}"
          if [[ "$COMMIT_MSG" == *"🤖 CI Assistant"* ]] || [[ "$COMMIT_MSG" == *"CI Assistant"* ]] || [[ "$COMMIT_MSG" == *"Self-Healing"* ]]; then
            echo "⚠️ تم منع الإصلاح لتجنب الحلقة المفرغة"
            echo "📝 رسالة الـ commit: $COMMIT_MSG"
            exit 0
          fi
          
          # فحص إذا كان هناك تغييرات فعلاً
          if git diff --quiet && git diff --cached --quiet; then
            echo "ℹ️ لا توجد تغييرات للحفظ"
            exit 0
          fi
          
          # إعداد Git
          git config --local user.email "action@github.com"
          git config --local user.name "CI Assistant"
          
          # إضافة workflow files فقط - لا يصلح أي شيء آخر
          git add .github/workflows/
          
          # إنشاء commit مع علامة خاصة
          git commit -m "🤖 CI Assistant: إصلاح workflow فقط

🔧 الإصلاحات (workflow files فقط):
- نوع الخطأ: ${{ steps.analyze-error.outputs.error-type }}
- الحل المطبق: ${{ steps.analyze-error.outputs.solution }}
- نوع الإصلاح: ${{ steps.analyze-error.outputs.fix-type }}

📚 التعلم:
- تم حفظ معلومات الخطأ للتعلم
- تم تحديث أنماط الأخطاء
- تم تحسين النظام لتجنب تكرار الخطأ

🤖 تم بواسطة: CI Assistant
🚫 إصلاح workflow فقط - لا يصلح أي شيء آخر" || echo "لا توجد تغييرات للحفظ"

      - name: 📤 رفع التغييرات
        run: |
          echo "📤 رفع التغييرات..."
          git push origin ${{ github.ref_name }} || echo "فشل في رفع التغييرات"

      - name: 📊 إنشاء تقرير الإصلاح
        run: |
          echo "📊 إنشاء تقرير الإصلاح..."
          
          # إنشاء تقرير
          cat > reports/ci-assistant-report.md << 'EOF'
          # 🤖 تقرير CI Assistant
          
          ## 📋 ملخص الإصلاح
          - **الوقت:** $(date)
          - **نوع الخطأ:** ${{ steps.analyze-error.outputs.error-type }}
          - **الحل المطبق:** ${{ steps.analyze-error.outputs.solution }}
          - **نوع الإصلاح:** ${{ steps.analyze-error.outputs.fix-type }}
          
          ## 🔧 الإجراءات المتخذة
          1. تحليل خطأ الـ Self-Healing workflow
          2. تحديد نوع الخطأ والحل المناسب
          3. تطبيق الإصلاح تلقائياً
          4. حفظ معلومات الخطأ للتعلم
          5. رفع التغييرات
          
          ## 📚 التعلم
          - تم حفظ الخطأ في قاعدة المعرفة
          - تم تحديث أنماط الأخطاء
          - النظام سيتجنب هذا الخطأ في المستقبل
          
          ## ✅ النتيجة
          تم إصلاح الخطأ بنجاح ورفع التغييرات.
          EOF
          
          echo "✅ تم إنشاء تقرير الإصلاح"

      - name: 📤 رفع التقرير
        uses: actions/upload-artifact@v4
        with:
          name: ci-assistant-report
          path: |
            reports/
            learning/
            analysis/
          retention-days: 30
