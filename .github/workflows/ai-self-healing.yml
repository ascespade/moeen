name: 🤖 AI Self-Healing CI/CD v3.0

on:
  push:
    branches: [ main, develop, auto/* ]
  pull_request:
    branches: [ main ]
  schedule:
    # تشغيل كل 4 ساعات
    - cron: '0 */4 * * *'
  workflow_dispatch:
    inputs:
      mode:
        description: 'وضع التشغيل'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - fix-only
          - test-only
          - optimize-only
          - refactor
          - background-agent

env:
  NODE_VERSION: '18'
  NPM_VERSION: '8'
  CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

jobs:
  # 🔍 فحص سريع
  quick-check:
    name: 🔍 فحص سريع
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: 📥 تحميل الكود
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 إعداد Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 تثبيت التبعيات الأساسية
        run: |
          npm ci --only=production
          npm install -g @typescript-eslint/parser @typescript-eslint/eslint-plugin

      - name: 🔍 فحص سريع للكود
        run: |
          echo "🔍 فحص سريع..."
          npm run lint:check || echo "⚠️ ESLint issues found"
          npm run type:check || echo "⚠️ TypeScript issues found"

  # 🧪 الاختبارات السريعة
  quick-tests:
    name: 🧪 اختبارات سريعة
    runs-on: ubuntu-latest
    needs: quick-check
    timeout-minutes: 10
    steps:
      - name: 📥 تحميل الكود
        uses: actions/checkout@v4

      - name: 📦 إعداد Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 تثبيت التبعيات
        run: npm ci

      - name: 🧪 تشغيل اختبارات الوحدة
        run: |
          echo "🧪 تشغيل اختبارات الوحدة..."
          npm run test:unit || echo "⚠️ Unit tests failed"

      - name: 📊 فحص التغطية
        run: |
          echo "📊 فحص تغطية الاختبارات..."
          npm run test:coverage || echo "⚠️ Coverage check failed"

  # 🤖 الباكجراوند ايجنت
  background-agent:
    name: 🤖 الباكجراوند ايجنت
    runs-on: ubuntu-latest
    needs: [quick-check, quick-tests]
    if: always()
    timeout-minutes: 30
    steps:
      - name: 📥 تحميل الكود
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 إعداد Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 تثبيت التبعيات
        run: npm ci

      - name: 🔧 إعداد Git
        run: |
          git config --local user.email "ai-agent@github.com"
          git config --local user.name "AI Background Agent"
          git config --local pull.rebase false

      - name: 🤖 تشغيل الباكجراوند ايجنت
        run: |
          echo "🤖 تشغيل الباكجراوند ايجنت..."
          case "${{ github.event.inputs.mode || 'auto' }}" in
            "auto")
              npm run agent:auto
              ;;
            "fix-only")
              npm run agent:fix
              ;;
            "test-only")
              npm run agent:test
              ;;
            "optimize-only")
              npm run agent:optimize
              ;;
            "refactor")
              npm run agent:refactor
              ;;
            "background-agent")
              npm run agent:auto
              ;;
            *)
              npm run agent:auto
              ;;
          esac

      - name: 📊 تحليل النتائج
        run: |
          echo "📊 تحليل نتائج الباكجراوند ايجنت..."
          if [ -f "reports/final_summary.md" ]; then
            echo "📋 تقرير النتائج:"
            cat reports/final_summary.md
          fi

      - name: 💾 حفظ التقارير
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: background-agent-results-${{ github.run_number }}
          path: |
            reports/
            logs/
            *.log
          retention-days: 30

  # 🔧 الإصلاح التلقائي
  auto-fix:
    name: 🔧 الإصلاح التلقائي
    runs-on: ubuntu-latest
    needs: background-agent
    if: failure() && github.event_name == 'push'
    timeout-minutes: 15
    steps:
      - name: 📥 تحميل الكود
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 إعداد Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 تثبيت التبعيات
        run: npm ci

      - name: 🔧 إصلاح ESLint
        run: |
          echo "🔧 إصلاح ESLint errors..."
          npm run lint:fix || echo "⚠️ لا يمكن إصلاح جميع ESLint errors"

      - name: 🔧 إصلاح TypeScript
        run: |
          echo "🔧 إصلاح TypeScript errors..."
          npm run type:check || echo "⚠️ لا يمكن إصلاح جميع TypeScript errors"

      - name: 🔧 إصلاح الاختبارات
        run: |
          echo "🔧 إصلاح الاختبارات..."
          npm run test:unit || echo "⚠️ لا يمكن إصلاح جميع الاختبارات"

      - name: 📝 إنشاء commit للإصلاحات
        run: |
          git config --local user.email "ai-agent@github.com"
          git config --local user.name "AI Background Agent"
          git add .
          if git diff --staged --quiet; then
            echo "لا توجد تغييرات للإصلاح"
          else
            git commit -m "🔧 AutoFix: AI Background Agent - $(date '+%Y-%m-%d %H:%M:%S')

            🤖 إصلاحات تلقائية من الباكجراوند ايجنت:
            - إصلاح ESLint errors
            - إصلاح TypeScript errors  
            - إصلاح الاختبارات
            - تحسين جودة الكود
            
            📊 تم بواسطة: AI Background Agent v3.0"
            git push
          fi

  # 🧪 الاختبارات الشاملة
  comprehensive-tests:
    name: 🧪 اختبارات شاملة
    runs-on: ubuntu-latest
    needs: [background-agent, auto-fix]
    if: always()
    timeout-minutes: 20
    steps:
      - name: 📥 تحميل الكود
        uses: actions/checkout@v4

      - name: 📦 إعداد Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 تثبيت التبعيات
        run: npm ci

      - name: 🧪 تشغيل اختبارات E2E
        run: |
          echo "🧪 تشغيل اختبارات E2E..."
          npm run test:e2e || echo "⚠️ E2E tests failed"

      - name: 🧪 تشغيل اختبارات التكامل
        run: |
          echo "🧪 تشغيل اختبارات التكامل..."
          npm run test:integration || echo "⚠️ Integration tests failed"

      - name: 📊 فحص الأداء
        run: |
          echo "📊 فحص الأداء..."
          npm run test:coverage || echo "⚠️ Coverage check failed"

  # 📊 تقرير النتائج
  report:
    name: 📊 تقرير النتائج
    runs-on: ubuntu-latest
    needs: [quick-check, quick-tests, background-agent, auto-fix, comprehensive-tests]
    if: always()
    steps:
      - name: 📥 تحميل النتائج
        uses: actions/download-artifact@v4
        with:
          name: background-agent-results-${{ github.run_number }}
          path: ./results

      - name: 📊 إنشاء التقرير
        run: |
          echo "📊 إنشاء تقرير النتائج..."
          echo "## 🤖 AI Self-Healing CI/CD v3.0 Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📅 التاريخ: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "### 🔄 الدورة: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "### 🌿 الفرع: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 الوضع: ${{ github.event.inputs.mode || 'auto' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ النتائج:" >> $GITHUB_STEP_SUMMARY
          echo "- فحص سريع: ${{ needs.quick-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- اختبارات سريعة: ${{ needs.quick-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- الباكجراوند ايجنت: ${{ needs.background-agent.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- الإصلاح التلقائي: ${{ needs.auto-fix.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- اختبارات شاملة: ${{ needs.comprehensive-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 التوصيات:" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.background-agent.result }}" == "success" ]; then
            echo "✅ الباكجراوند ايجنت يعمل بشكل مثالي" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ الباكجراوند ايجنت يحتاج مراجعة" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ needs.auto-fix.result }}" == "success" ]; then
            echo "✅ الإصلاح التلقائي نجح" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ لا توجد مشاكل تحتاج إصلاح تلقائي" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📧 إرسال التنبيهات
        if: failure()
        run: |
          echo "📧 إرسال تنبيهات الفشل..."
          echo "❌ فشل في AI Self-Healing CI/CD v3.0" >> $GITHUB_STEP_SUMMARY

  # 🚀 النشر التلقائي
  deploy:
    name: 🚀 النشر التلقائي
    runs-on: ubuntu-latest
    needs: [background-agent, comprehensive-tests]
    if: success() && github.ref == 'refs/heads/main'
    steps:
      - name: 📥 تحميل الكود
        uses: actions/checkout@v4

      - name: 📦 إعداد Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 تثبيت التبعيات
        run: npm ci

      - name: 🏗️ بناء المشروع
        run: npm run build

      - name: 🚀 النشر
        run: |
          echo "🚀 نشر المشروع..."
          echo "✅ تم النشر بنجاح بواسطة AI Self-Healing CI/CD v3.0"

  # 🧹 تنظيف
  cleanup:
    name: 🧹 تنظيف
    runs-on: ubuntu-latest
    needs: [report, deploy]
    if: always()
    steps:
      - name: 🧹 تنظيف الملفات المؤقتة
        run: |
          echo "🧹 تنظيف الملفات المؤقتة..."
          # حذف الملفات المؤقتة

      - name: 📊 تحديث السجلات
        run: |
          echo "📊 تحديث سجلات النظام..."
          echo "✅ تم تنظيف النظام بنجاح"
